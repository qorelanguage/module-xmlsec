/*
    QC_XmlSecKeyManager.qpp

    Qore Programming Language

    Copyright 2003 - 2021 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "qore-xmlsec.h"

#include <qore/QoreSSLCertificate.h>

#include "QC_XmlSecKeyManager.h"
#include "QC_XmlSecKey.h"
#include "QC_XmlSec.h"

//! The \c XmlSecKeyManager class implements an xmlsec key manager (wrapper for a C++ \c xmlSecKeysManager structure)
/**
*/
qclass XmlSecKeyManager [arg=QoreXmlSecKeyManager* mgr; ns=Qore::XmlSec];

//! creates the object
/** @par Example:
    @code{.py}
XmlSecKeyManager mgr();
    @endcode

    @throw XMLSECKEYMANAGER-ERROR error reported by \c libxmlsec creating or initializing the key manager
*/
XmlSecKeyManager::constructor() {
    SimpleRefHolder<QoreXmlSecKeyManager> mgr(new QoreXmlSecKeyManager(xsink));
    if (*xsink) {
        return;
    }

    self->setPrivate(CID_XMLSECKEYMANAGER, mgr.release());
}

//! throws an exception; \c XmlSecKeyManager objects cannot be copied
/** @throw XMLSECKEYMANAGER-COPY-ERROR XmlSecKeyManager objects cannot be copied
*/
XmlSecKeyManager::copy() {
    xsink->raiseException("XMLSECKEYMANAGER-COPY-ERROR", "The XmlSecKeyManager class cannot be copied");
}

//! adds an @ref Qore::XmlSec::XmlSecKey "XmlSecKey" to the \c XmlSecKeyManager object
/** @par Example:
    @code{.py}
mgr.addKey(key);
    @endcode

    @param key the key to add

    @throw XMLSECKEYMANAGER-ERROR error reported by libxmlsec assigning the key to the key manager
*/
XmlSecKeyManager::addKey(XmlSecKey[QoreXmlSecKey] key) {
    SimpleRefHolder<QoreXmlSecKey> holder(key);

    xmlSecKeyPtr new_key = key->clone(xsink);
    if (!new_key) {
        assert(*xsink);
        return QoreValue();
    }

    if (mgr->adoptKey(new_key, xsink)) {
        assert(*xsink);
        return QoreValue();
    }
}

//! adds certificate to the \c XmlSecKeyManager object and marks it according tot the arguments
/** @par Example:
    @code{.py}
mgr.loadCertFromPath(path, xmlSecKeyDataFormatCertPem, xmlSecKeyDataTypeTrusted);
    @endcode

    @param path the path to the certificate on the filesystem
    @param format the format of the file data (for possible values, see @ref xmlsec_keydataformat_constants for
    possible values)
    @param type the certificate type; see @ref xmlsec_keydatatype_constants for possible values

    @throw XMLSECKEYMANAGER-ERROR error reported by libxmlsec loading the certificate or assigning the certificate to
    the key manager
*/
XmlSecKeyManager::loadCertFromPath(string path, int format, int type) [dom=FILESYSTEM] {
    mgr->loadCertFromPath(xsink, path->c_str(), (xmlSecKeyDataFormat)format, (xmlSecKeyDataType)type);
}

//! adds certificate to the \c XmlSecKeyManager object and marks it according tot the arguments
/** @par Example:
    @code{.py}
mgr.loadCertFromMemory(cert_data, xmlSecKeyDataFormatCertPem, xmlSecKeyDataTypeTrusted);
    @endcode

    @param cert_data the certificate data
    @param format the format of the file data (for possible values, see @ref xmlsec_keydataformat_constants for
    possible values)
    @param type the certificate type; see @ref xmlsec_keydatatype_constants for possible values

    @throw XMLSECKEYMANAGER-ERROR error reported by libxmlsec loading the certificate or assigning the certificate to
    the key manager
*/
XmlSecKeyManager::loadCertFromMemory(data cert_data, int format, int type) {
    const char* bin_ptr;
    size_t bin_len;
    q_get_data(cert_data, bin_ptr, bin_len);
    mgr->loadCertFromMemory(xsink, (const xmlSecByte*)bin_ptr, (xmlSecSize)bin_len, (xmlSecKeyDataFormat)format,
        (xmlSecKeyDataType)type);
}

//! Verifies the signature of the signed XML string passed
/** @par Example:
    @code{.py}
mgr.verify(signed_string);
    @endcode

    @param signed_string the signed XML string to verify

    If any errors occur, an exception is thrown

    @throw XMLSEC-SIGN-ERROR: error in arguments to the methods; signature verification failed
    @throw XMLSEC-DSIGCTX-ERROR: signature verification could not be processed by libxmlse
*/
nothing XmlSecKeyManager::verify(string signed_string, ...) {
    q_xmlsec_verify(xsink, signed_string, mgr, 1, args);
}
