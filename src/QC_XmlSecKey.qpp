/*
    QC_XmlSecKey.qpp

    Qore Programming Language

    Copyright 2003 - 2021 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "qore-xmlsec.h"

#include <qore/QoreSSLCertificate.h>

#include "QC_XmlSecKey.h"
#include "QC_XmlSec.h"

//! The \c XmlSecKey class implements an \c xmlsec key (wrapper for an \c xmlSecKey C++ structure
/**
*/
qclass XmlSecKey [arg=QoreXmlSecKey* key; ns=Qore::XmlSec];

//! Creates a new \c XmlSecKey based on the arguments passed.
/** @par Example:
    @code{.py}
XmlSec key(key_pem, xmlSecKeyDataFormatPem, password);
    @endcode

    @param key the key in PEM or DER format
    @param format the format of the key (for possible values, see @ref xmlsec_keydataformat_constants for possible values)
    @param password the optional password for the key

    Creates a new key based on key data (for example, in PEM or DER format), the second argument will normally be xmlSecKeyDataFormatPem or xmlSecKeyDataFormatDer.

    The password argument is required for private keys with a password.
*/
XmlSecKey::constructor(data key, int format, *string password) {
    const char* ptr;
    size_t len;
    q_get_data(key, ptr, len);

    SimpleRefHolder<QoreXmlSecKey> newkey(new QoreXmlSecKey(xsink, (xmlSecByte*)ptr, len,
        (xmlSecKeyDataFormat)format, password ? password->c_str() : nullptr));
    if (*xsink)
        return;
    self->setPrivate(CID_XMLSECKEY, newkey.release());
}

//! Creates a new \c XmlSecKey based on the arguments passed.
/** @par Example:
    @code{.py}
XmlSec key(str, num_bits, type);
    @endcode

    @param key the key in PEM or DER format
    @param num_bits the number of bits
    @param type the key type; see @ref xmlsec_keydatatype_constants for possible values

    Creates a new key based on key data (for example, in PEM or DER format), the second argument will normally be xmlSecKeyDataFormatPem or xmlSecKeyDataFormatDer.
*/
XmlSecKey::constructor(string str, int num_bits, int type) {
    SimpleRefHolder<QoreXmlSecKey> key(new QoreXmlSecKey((const xmlChar*)str->c_str(), num_bits, (xmlSecKeyDataType)type, xsink));
    if (*xsink)
        return;

    self->setPrivate(CID_XMLSECKEY, key.release());
}

//! Creates a new \c XmlSecKey based on the arguments passed.
/** @par Example:
    @code{.py}
XmlSec key(int id, num_bits, type);
    @endcode

    @param id an integer constant giving the key ID; see @ref xmlsec_keydataid_constants for possible values
    @param num_bits the number of bits
    @param type the key type; see @ref xmlsec_keydatatype_constants for possible values

    @throw XMLSECKEY-KEYID-ERROR invalid key ID given
*/
XmlSecKey::constructor(int id, int num_bits, int type) {
    xmlSecKeyDataId keyid = xmlsec_get_keydata_id(id);
    if (!keyid) {
        xsink->raiseException("XMLSECKEY-KEYID-ERROR", "invalid key ID %d given", id);
        return;
    }

    SimpleRefHolder<QoreXmlSecKey> key(new QoreXmlSecKey(keyid, num_bits, (xmlSecKeyDataType)type, xsink));
    if (*xsink) {
        return;
    }

    self->setPrivate(CID_XMLSECKEY, key.release());
}

//! Creates a new XmlSecKey object based on the original
/** @par Example:
    @code{.py}
XmlSecKey nk = k.copy();
    @endcode
*/
XmlSecKey::copy() {
    QoreXmlSecKey *nk = key->copy(xsink);
    if (!nk) {
        assert(*xsink);
        return;
    }

    self->setPrivate(CID_XMLSECKEY, nk);
}

//! Assigns an X.509 certificate to the \c XmlSecKey object
/** @par Example:
    @code{.py}
key.setCertificate(cert_pem, xmlSecKeyDataFormatCertPem);
    @endcode

    @param cert the certificate in PEM or DER format
    @param format the format of the key (for possible values, see @ref xmlsec_keydataformat_constants for possible values)
*/
nothing XmlSecKey::setCertificate(data cert, int format) {
    const char* ptr;
    size_t len;
    q_get_data(cert, ptr, len);

    key->setCertificate((xmlSecByte*)ptr, len, (xmlSecKeyDataFormat)format, xsink);
}

//! Assigns an X.509 certificate to the \c XmlSecKey object
/** @par Example:
    @code{.py}
key.setCertificate(cert);
    @endcode

    @param cert X.509 certificate to set
*/
nothing XmlSecKey::setCertificate(SSLCertificate[QoreSSLCertificate] cert)) {
    ReferenceHolder<QoreSSLCertificate> holder(cert, xsink);
    SimpleRefHolder<QoreStringNode> cert_pem(cert->getPEM(xsink));
    if (*xsink)
        return QoreValue();

    key->setCertificate((xmlSecByte*)cert_pem->c_str(), cert_pem->size(), xmlSecKeyDataFormatCertPem, xsink);
}

//! Sets the key name in the \c XmlSecKey object
/** @par Example:
    @code{.py}
key.setName(name);
    @endcode

    @throw XMLSECKEY-ERROR error reported by libxmlsec setting the name
*/
nothing XmlSecKey::setName(string name) {
    key->setName(name->c_str(), xsink);
}

//! Returns the key name; if no key name is set, returns @ref nothing
/** @par Example:
    @code{.py}
*string name = key.getName();
    @endcode

    @throw XMLSECKEY-ERROR error reported by libxmlsec getting the name
*/
string XmlSecKey::getName() [flags=RET_VALUE_ONLY] {
    return key->getName(xsink);
}

//! Returns the key's type as an integer value; see @ref xmlsec_keydatatype_constants for possible values
/** @par Example:
    @code{.py}
int type = key.getType());
    @endcode

    @throw XMLSECKEY-ERROR error reported by libxmlsec getting the type
*/
int XmlSecKey::getType() [flags=RET_VALUE_ONLY] {
    return (int64)key->getType(xsink);
}

//! Returns the key's bit size as an integer
/** @par Example:
    @code{.py}
int size = key.getSize());
    @endcode

    @return the key's bit size as an integer

    @throw XMLSECKEY-ERROR error reported by libxmlsec reading the key
*/
int XmlSecKey::getSize() [flags=RET_VALUE_ONLY] {
    return key->getSize(xsink);
}

//! Verifies the signature of the signed XML string passed
/** @par Example:
    @code{.py}
key.verify(signed_string);
    @endcode

    @param signed_string the signed XML string to verify

    If any errors occur, an exception is thrown

    @throw XMLSEC-SIGN-ERROR: error in arguments to the methods; signature verification failed
    @throw XMLSEC-DSIGCTX-ERROR: signature verification could not be processed by libxmlse
*/
nothing XmlSecKey::verify(string signed_string, ...) {
    q_xmlsec_verify(xsink, signed_string, key, 1, args);
}
